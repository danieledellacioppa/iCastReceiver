Ecco il nome del file numero 1:
--- MainActivity.kt ---
Contenuto del file numero 1:
---
package com.akhter.icastreceiver

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import com.example.icastreceiver.ScreenCastViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.ByteArrayOutputStream
import java.io.InputStream
import java.net.ServerSocket
import java.nio.ByteBuffer

class MainActivity : ComponentActivity() {

    private lateinit var viewModel: ScreenCastViewModel
    private val serverPort = 7000  // Assicurati che corrisponda a quello impostato su iOS

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        viewModel = ViewModelProvider(this).get(ScreenCastViewModel::class.java)

        setContent {
            MainScreen(viewModel = viewModel)
        }

        startServer()
    }

    private fun startServer() {
        lifecycleScope.launch(Dispatchers.IO) {
            val serverSocket = ServerSocket(serverPort)
            while (true) {
                val clientSocket = serverSocket.accept()
                handleClient(clientSocket.getInputStream())
            }
        }
    }

    private fun handleClient(inputStream: InputStream) {
        lifecycleScope.launch(Dispatchers.IO) {
            val byteArrayOutputStream = ByteArrayOutputStream()
            val buffer = ByteArray(4) // Buffer per i primi 4 byte che contengono la dimensione del frame

            while (true) {
                // Leggi la dimensione del frame
                if (inputStream.read(buffer) != 4) break
                val dataSize = ByteBuffer.wrap(buffer).int
                println("Ricevuto frame con dimensione: $dataSize bytes")

                // Leggi il frame in base alla dimensione
                val imageData = ByteArray(dataSize)
                var totalBytesRead = 0
                while (totalBytesRead < dataSize) {
                    val bytesRead = inputStream.read(imageData, totalBytesRead, dataSize - totalBytesRead)
                    if (bytesRead == -1) break
                    totalBytesRead += bytesRead
                }
                println("Frame completo ricevuto, aggiornamento della vista...")

                // Aggiorna l'immagine nel ViewModel
                viewModel.receiveFrame(imageData)
            }

            inputStream.close()
            byteArrayOutputStream.close()
        }
    }
}
--- Fine del contenuto del file numero 1 ---

Ecco il nome del file numero 2:
--- MainScreen.kt ---
Contenuto del file numero 2:
---
package com.akhter.icastreceiver

import android.graphics.BitmapFactory
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import com.example.icastreceiver.ScreenCastViewModel

@Composable
fun MainScreen(viewModel: ScreenCastViewModel) {
    val imageData by viewModel.imageData.collectAsState()

    Box(modifier = Modifier.fillMaxSize()) {
        imageData?.let { data ->
            // Converti `ByteArray` in `Bitmap`
            val bitmap = BitmapFactory.decodeByteArray(data, 0, data.size)
            bitmap?.let {
                Image(bitmap = it.asImageBitmap(), contentDescription = null, modifier = Modifier.fillMaxSize())
            }
        } ?: run {
            Text(text = "In attesa dello screencast...", modifier = Modifier.align(Alignment.Center))
        }
    }
}
--- Fine del contenuto del file numero 2 ---

Ecco il nome del file numero 3:
--- ScreenCastViewModel.kt ---
Contenuto del file numero 3:
---
package com.example.icastreceiver

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class ScreenCastViewModel : ViewModel() {

    private val _imageData = MutableStateFlow<ByteArray?>(null)
    val imageData = _imageData.asStateFlow()

    fun receiveFrame(data: ByteArray) {
        viewModelScope.launch(Dispatchers.IO) {
            _imageData.value = data
        }
    }
}
--- Fine del contenuto del file numero 3 ---

